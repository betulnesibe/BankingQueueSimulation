package swe510_project1;
import java.util.Random;
import java.lang.Thread;



public class BankingSimulation {
	
	// enum for priorities, which is given in the project details
	enum Priority {
		PRIO_CARD_THEFT,
		PRIO_CLOSE_ACCOUNT,
		PRIO_OPEN_ACCOUNT,
		PRIO_PAY_BILL,
		PRIO_DEPOSIT,
		PRIO_DRAW,
		MAX_PRIO,
	};
	
	
	// printing method for the queue specifically with priority values from enum to be able to print the values but not the names
	// takes one parameter, the existing queue (the first element) in the <Integer,Priority> format and does not return anything but print during the run.
    private static void printQueue4Enum(PriorityQueue<Integer,Priority>.Node root) {
        if (root == null) {
            System.out.println("Good work! There is no waiting customer.");
        } else {
            System.out.println("The customers waiting in the queue:");
        }

        while (root != null) {
            System.out.println("Priority is: " + Integer.toString(root.priority.ordinal())  + ", CustomerID is: " + root.customer_id);
            root = root.next;
        }
    }
	
	public static void main(String[] args) {
		Random random = new Random();
		
		PriorityQueue<Integer, Priority> pQ = new PriorityQueue<>(); // initializing the PriorityQueue class in <Integer, Priority> format
		PriorityQueue<Integer, Priority>.Node bank_queue = null; // creating a Node in <Integer, Priority> format
		
		int len_enum = Priority.values().length; 
		/*
		 * According to this page (https://stackoverflow.com/questions/1972392/pick-a-random-value-from-an-enum), it can be created with 
		 * Priority priority = Priority.values()[random.nextInt(Priority.values().length)]; 
		 * Yet, it would create array on each iteration of the loop. so, a len variable can be assigned to resolve this outside of the loop.
		 * Or, if we know the last element, we can get its value and find a random accordingly as following,s
		 * Priority priority = Priority.values()[random.nextInt(Priority.MAX_PRIO.ordinal()+1)]; 
		 * In this case, since we know the length will not change for sure, the second option is used.
		 */
		
		// Project requirement: in a loop that creates 10 customers:
		for(int i = 0; i < 10; i++) {
			
			// Project requirement: Generate random customer id (between 1000 and 2000, both included) and financial priority (using the enum structure).
			int customer_id = random.nextInt(1001) + 1000; // 0-1000 + 1000 -> 1000 - 2000
			Priority priority = Priority.values()[random.nextInt(len_enum)]; //0-6 for 7 priorities
			
			
			// Project requirement: Create a customer and add our newly created customer to the queue (creates the queue at first iteration)
			PriorityQueue<Integer, Priority>.ReturnedNodesFromPQ tmp_result = pQ.insertNode(bank_queue, customer_id, priority);
			bank_queue = tmp_result.head;
			System.out.println("Customer added. Priority is: " + priority.ordinal() + ", CustomerID is: " + customer_id);
            
			
			// Project requirement: Print the waiting customers.
			printQueue4Enum(bank_queue);
			System.out.println("------");
			
			
			// Project requirement: Wait for half a second. try/catch block here is generated by eclipse ide.
			try {
				Thread.sleep(500);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			
			// Project requirement: For %50 of the time (meaning that with a probability of %50), remove the front customer from the queue to be treated.
			if (random.nextBoolean()) { //https://stackoverflow.com/questions/15285643/how-to-get-a-50-50-chance-in-random-generator, in the first version, nextInt(1)+1 or 1-2 was used. 
				tmp_result = pQ.removeNode(bank_queue);
				PriorityQueue<Integer, Priority>.Node ggNode = tmp_result.otherNode;
				bank_queue = tmp_result.head;
				System.out.println("Customer removed. Priority is: " + ggNode.priority.ordinal() + ", CustomerID is: " + ggNode.customer_id);
			}
				
			
			// Project requirement: Print the waiting customers.
			printQueue4Enum(bank_queue);
			System.out.println("------");
		}
		
	}

}

